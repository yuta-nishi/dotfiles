{
	"template": {
		"prefix": "ac_template",
		"body": [
			"// Time Complexity: O()",
			"// Space Complexity: O()",
			"",
			"use proconio::input;",
			"",
			"fn main() {}"
		],
		"description": "Template for AtCoder"
	},
	"build_ungraph": {
		"prefix": "ac_build_ungraph",
		"body": [
			"fn build_ungraph(num_nodes: usize, edges: &[(usize, usize)]) -> Vec<Vec<usize>> {",
			"let mut graph = vec![vec![]; num_nodes];",
			"for &(node1, node2) in edges {",
			"graph[node1].push(node2);",
			"graph[node2].push(node1);",
			"}",
			"",
			"graph",
			"}"
		],
		"description": "Build undirected graph"
	},
	"dijkstra_all": {
		"prefix": "ac_dijkstra_all",
		"body": [
			"fn dijkstra_all(start_idx: usize, graph: &[Vec<usize>]) -> Vec<Option<usize>> {",
			"    let mut distances = vec![None; graph.len()];",
			"    let mut queue = VecDeque::new();",
			"    distances[start_idx] = Some(0);",
			"    queue.push_back((0, start_idx));",
			"",
			"    while let Some((curr_distance, curr_node)) = queue.pop_front() {",
			"        for &neighbor in &graph[curr_node] {",
			"            if distances[neighbor].is_none() {",
			"                distances[neighbor] = Some(curr_distance + 1);",
			"                queue.push_back((curr_distance + 1, neighbor));",
			"            }",
			"        }",
			"    }",
			"",
			"    distances",
			"}"
		],
		"description": "Compute shortest paths from a starting node using Dijkstra's algorithm"
	},
	"dijkstra_all_with_weight": {
		"prefix": "ac_dijkstra_all_with_weight",
		"body": [
			"fn dijkstra_all_with_weight(start_idx: usize, graph: &[Vec<(usize, usize)>]) -> Vec<Option<usize>> {",
			"    let mut distances = vec![None; graph.len()];",
			"    let mut heap = BinaryHeap::new();",
			"    distances[start_idx] = Some(0);",
			"    heap.push(Reverse((0, start_idx)));",
			"",
			"    while let Some(Reverse((curr_distance, curr_node))) = heap.pop() {",
			"        if let Some(distance) = distances[curr_node] {",
			"            if distance < curr_distance {",
			"                continue;",
			"            }",
			"        }",
			"",
			"        for &(neighbor, weight) in &graph[curr_node] {",
			"            let new_distance = curr_distance + weight;",
			"            if distances[neighbor].map_or(true, |d| new_distance < d) {",
			"                distances[neighbor] = Some(new_distance);",
			"                heap.push(Reverse((new_distance, neighbor)));",
			"            }",
			"        }",
			"    }",
			"",
			"    distances",
			"}"
		],
		"description": "Compute shortest paths from a starting node using Dijkstra's algorithm with weights"
	}
}
